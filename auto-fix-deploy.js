const https = require('https');

console.log('üîß Auto-Fix and Deploy Script');
console.log('==============================\n');

// –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª
const fs = require('fs');
const path = require('path');

function readEnvFile() {
  try {
    const envContent = fs.readFileSync(path.join(__dirname, '.env'), 'utf8');
    const env = {};
    envContent.split('\n').forEach(line => {
      if (line && !line.startsWith('#') && line.includes('=')) {
        const [key, ...valueParts] = line.split('=');
        env[key.trim()] = valueParts.join('=').trim();
      }
    });
    return env;
  } catch (error) {
    console.error('‚ùå –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env —Ñ–∞–π–ª');
    return {};
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º .env
function fixEnvFile() {
  console.log('üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º .env —Ñ–∞–π–ª...\n');
  
  const env = readEnvFile();
  let needsFix = false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Pinecone –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  if (env.PINECONE_API_KEY && env.PINECONE_API_KEY.includes('your-pinecone')) {
    console.log('‚ùå PINECONE_API_KEY —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É');
    needsFix = true;
  }
  
  if (!env.PINECONE_ENVIRONMENT || env.PINECONE_ENVIRONMENT.includes('your-pinecone')) {
    console.log('‚ùå PINECONE_ENVIRONMENT –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–ª—É—à–∫—É');
    needsFix = true;
  }
  
  if (!env.PINECONE_INDEX_NAME) {
    console.log('‚ö†Ô∏è PINECONE_INDEX_NAME –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
    needsFix = true;
  }
  
  if (needsFix) {
    console.log('\nüîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º .env —Ñ–∞–π–ª...');
    
    // –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π .env
    let newEnvContent = fs.readFileSync(path.join(__dirname, '.env'), 'utf8');
    
    // –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ Pinecone –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    newEnvContent = newEnvContent.replace(
      /^PINECONE_API_KEY=your-pinecone-api-key$/m,
      '# PINECONE_API_KEY=your-pinecone-api-key'
    );
    newEnvContent = newEnvContent.replace(
      /^PINECONE_ENVIRONMENT=your-pinecone-environment$/m,
      '# PINECONE_ENVIRONMENT=your-pinecone-environment'
    );
    
    // –î–æ–±–∞–≤–ª—è–µ–º PINECONE_INDEX_NAME –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!env.PINECONE_INDEX_NAME) {
      newEnvContent += '\nPINECONE_INDEX_NAME=ai-cofounder-ideas\n';
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.writeFileSync(path.join(__dirname, '.env.fixed'), newEnvContent);
    console.log('‚úÖ –°–æ–∑–¥–∞–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π .env.fixed —Ñ–∞–π–ª\n');
    
    // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    fs.copyFileSync(path.join(__dirname, '.env.fixed'), path.join(__dirname, '.env'));
    console.log('‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω\n');
  } else {
    console.log('‚úÖ .env —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π\n');
  }
}

// –ö–æ–º–º–∏—Ç–∏–º –∏ –ø—É—à–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
async function deployChanges() {
  console.log('üöÄ –î–µ–ø–ª–æ–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...\n');
  
  const { exec } = require('child_process');
  const util = require('util');
  const execPromise = util.promisify(exec);
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ git...');
    await execPromise('git add -A');
    
    // –ö–æ–º–º–∏—Ç–∏–º
    console.log('üíæ –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...');
    try {
      await execPromise('git commit -m "fix: disable broken Pinecone env vars and add health check"');
      console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–æ–º–º–∏—á–µ–Ω—ã');
    } catch (error) {
      if (error.message.includes('nothing to commit')) {
        console.log('‚ÑπÔ∏è –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞');
      } else {
        throw error;
      }
    }
    
    // –ü—É—à–∏–º
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ GitHub...');
    await execPromise('git push origin main');
    console.log('‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ GitHub');
    
    console.log('\n‚úÖ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω! Vercel –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å–æ–±–µ—Ä–µ—Ç –ø—Ä–æ–µ–∫—Ç.');
    console.log('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∞–π—Ç.');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è:', error.message);
    
    // –ï—Å–ª–∏ push –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–∑-–∑–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
    if (error.message.includes('GH013') || error.message.includes('secret')) {
      console.log('\n‚ö†Ô∏è GitHub –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª push –∏–∑-–∑–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤.');
      console.log('üìã –†–µ—à–µ–Ω–∏–µ:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –æ—à–∏–±–∫–∏ –≤—ã—à–µ');
      console.log('2. –†–∞–∑—Ä–µ—à–∏—Ç–µ push');
      console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞');
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è
async function checkHealth() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å–∞–π—Ç–∞...\n');
  
  return new Promise((resolve) => {
    https.get('https://ai-cofounder-platform-2411.vercel.app/api/health', (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const health = JSON.parse(data);
          
          console.log('üìä –°—Ç–∞—Ç—É—Å API:');
          console.log('==============');
          
          if (health.ok) {
            console.log('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
          } else {
            console.log('‚ö†Ô∏è API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏');
          }
          
          console.log('\nüìã –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:');
          Object.entries(health.env || {}).forEach(([key, value]) => {
            console.log(`${value ? '‚úÖ' : '‚ùå'} ${key}`);
          });
          
          console.log('\nüîå –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã:');
          if (health.services) {
            console.log(`${health.services.openai?.ok ? '‚úÖ' : '‚ùå'} OpenAI API`);
            console.log(`${health.services.supabase?.ok ? '‚úÖ' : '‚ùå'} Supabase`);
            console.log(`${health.services.pinecone?.ok ? '‚úÖ' : '‚ö†Ô∏è'} Pinecone (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)`);
          }
          
          resolve();
        } catch (error) {
          console.log('‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å health API (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –¥–µ–ø–ª–æ–∏—Ç—Å—è)');
          resolve();
        }
      });
    }).on('error', (err) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', err.message);
      resolve();
    });
  });
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üèÅ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –¥–µ–ø–ª–æ–π...\n');
  
  // 1. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º .env
  fixEnvFile();
  
  // 2. –î–µ–ø–ª–æ–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
  await deployChanges();
  
  // 3. –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
  console.log('\n‚è≥ –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∫–∏ –Ω–∞ Vercel...');
  await new Promise(resolve => setTimeout(resolve, 30000));
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
  await checkHealth();
  
  console.log('\n‚úÖ –ì–æ—Ç–æ–≤–æ!');
  console.log('üåê –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç: https://ai-cofounder-platform-2411.vercel.app/');
  console.log('üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+F5 –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –±—Ä–∞—É–∑–µ—Ä–∞');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
main().catch(console.error);
