// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ Vercel API
// –ù—É–∂–µ–Ω Vercel Token: https://vercel.com/account/tokens

const VERCEL_TOKEN = 'YOUR_VERCEL_TOKEN'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
const PROJECT_ID = 'ai-cofounder-platform-2411'; // –í–∞—à –ø—Ä–æ–µ–∫—Ç

async function redeploy() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–µ–ø–ª–æ–π —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞...');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π
    const deploymentsRes = await fetch(
      `https://api.vercel.com/v6/deployments?projectId=${PROJECT_ID}&limit=1`,
      {
        headers: {
          'Authorization': `Bearer ${VERCEL_TOKEN}`,
        }
      }
    );
    
    const deployments = await deploymentsRes.json();
    
    if (!deployments.deployments || deployments.deployments.length === 0) {
      console.error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç—ã');
      return;
    }
    
    const lastDeployment = deployments.deployments[0];
    console.log(`üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–ª–æ–π: ${lastDeployment.url}`);
    
    // 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–¥–µ–ø–ª–æ–π —Å –æ—á–∏—Å—Ç–∫–æ–π –∫—ç—à–∞
    const redeployRes = await fetch(
      `https://api.vercel.com/v13/deployments`,
      {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${VERCEL_TOKEN}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: PROJECT_ID,
          gitSource: {
            ref: lastDeployment.meta?.githubCommitRef || 'main',
            repoId: lastDeployment.meta?.githubRepoId,
            type: 'github',
          },
          target: 'production',
          // –§–æ—Ä—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É
          buildCache: false,
        })
      }
    );
    
    if (!redeployRes.ok) {
      const error = await redeployRes.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–µ–ø–ª–æ—è:', error);
      return;
    }
    
    const newDeployment = await redeployRes.json();
    console.log('‚úÖ –†–µ–¥–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω!');
    console.log(`üîó URL: https://${newDeployment.url}`);
    console.log(`üìä –°—Ç–∞—Ç—É—Å: ${newDeployment.readyState}`);
    console.log('‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    let checkCount = 0;
    const checkInterval = setInterval(async () => {
      checkCount++;
      
      const statusRes = await fetch(
        `https://api.vercel.com/v13/deployments/${newDeployment.id}`,
        {
          headers: {
            'Authorization': `Bearer ${VERCEL_TOKEN}`,
          }
        }
      );
      
      const status = await statusRes.json();
      console.log(`üìä –°—Ç–∞—Ç—É—Å: ${status.readyState}`);
      
      if (status.readyState === 'READY') {
        console.log('‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        console.log(`üåê –°–∞–π—Ç: https://${status.url}`);
        clearInterval(checkInterval);
      } else if (status.readyState === 'ERROR' || status.readyState === 'CANCELED') {
        console.error('‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π');
        clearInterval(checkInterval);
      } else if (checkCount > 30) { // 5 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º
        console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
        clearInterval(checkInterval);
      }
    }, 10000);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
}

// –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
console.log('üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
console.log('1. –ü–æ–ª—É—á–∏—Ç–µ Vercel Token: https://vercel.com/account/tokens');
console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_VERCEL_TOKEN –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ');
console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node vercel-redeploy.js');
console.log('');

// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º
if (VERCEL_TOKEN !== 'YOUR_VERCEL_TOKEN') {
  redeploy();
} else {
  console.log('‚ö†Ô∏è  –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ VERCEL_TOKEN –≤ —Ñ–∞–π–ª–µ!');
}
