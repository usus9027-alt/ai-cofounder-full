const https = require('https');
const fs = require('fs');

console.log('üß™ AI Cofounder Platform - Auto Test');
console.log('=====================================');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–∞–π—Ç–∞
function fetchWebsite(url) {
  return new Promise((resolve, reject) => {
    https.get(url, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        resolve({
          statusCode: res.statusCode,
          headers: res.headers,
          body: data
        });
      });
    }).on('error', (err) => {
      reject(err);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
function analyzeContent(content) {
  const analysis = {
    hasBeginButton: content.includes('Begin'),
    hasAuthForm: content.includes('AuthForm') || content.includes('–í—Ö–æ–¥') || content.includes('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'),
    hasCanvasBoard: content.includes('CanvasBoard') || content.includes('AI Canvas'),
    hasChatInterface: content.includes('AI –ß–∞—Ç') || content.includes('–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é'),
    hasSupabaseIntegration: content.includes('supabase'),
    hasNextAuth: content.includes('next-auth'),
    isStaticVersion: content.includes('Ideas.') && content.includes('Simplified.'),
    isDynamicVersion: content.includes('useState') || content.includes('useEffect')
  };
  
  return analysis;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAutoTest() {
  try {
    console.log('üì° Fetching website content...');
    const result = await fetchWebsite('https://ai-cofounder-platform-2411.vercel.app/');
    
    console.log(`‚úÖ Status Code: ${result.statusCode}`);
    console.log(`üìÖ Last Modified: ${result.headers['last-modified'] || 'Not available'}`);
    console.log(`üîÑ Cache Control: ${result.headers['cache-control'] || 'Not available'}`);
    
    console.log('\nüîç Analyzing content...');
    const analysis = analyzeContent(result.body);
    
    console.log('\nüìä Analysis Results:');
    console.log('===================');
    console.log(`‚ùå Has Begin Button: ${analysis.hasBeginButton ? 'YES' : 'NO'}`);
    console.log(`‚úÖ Has Auth Form: ${analysis.hasAuthForm ? 'YES' : 'NO'}`);
    console.log(`‚úÖ Has Canvas Board: ${analysis.hasCanvasBoard ? 'YES' : 'NO'}`);
    console.log(`‚úÖ Has Chat Interface: ${analysis.hasChatInterface ? 'YES' : 'NO'}`);
    console.log(`‚úÖ Has Supabase Integration: ${analysis.hasSupabaseIntegration ? 'YES' : 'NO'}`);
    console.log(`‚ö†Ô∏è  Has NextAuth: ${analysis.hasNextAuth ? 'YES' : 'NO'}`);
    console.log(`üìÑ Is Static Version: ${analysis.isStaticVersion ? 'YES' : 'NO'}`);
    console.log(`‚ö° Is Dynamic Version: ${analysis.isDynamicVersion ? 'YES' : 'NO'}`);
    
    console.log('\nüéØ Diagnosis:');
    console.log('=============');
    
    if (analysis.hasBeginButton && analysis.isStaticVersion) {
      console.log('üö® PROBLEM: Site is still showing OLD static version!');
      console.log('   - Begin button is present');
      console.log('   - No authentication form');
      console.log('   - No dynamic React components');
      console.log('\nüí° Possible causes:');
      console.log('   1. Vercel cache not updated');
      console.log('   2. Wrong deployment branch');
      console.log('   3. Build failed silently');
      console.log('   4. Static files being served instead of Next.js app');
    } else if (analysis.hasAuthForm && analysis.hasCanvasBoard) {
      console.log('‚úÖ SUCCESS: Site is showing NEW dynamic version!');
      console.log('   - Authentication form present');
      console.log('   - Canvas board integrated');
      console.log('   - Dynamic React components loaded');
    } else {
      console.log('‚ö†Ô∏è  MIXED: Site shows partial updates');
      console.log('   - Some new features present');
      console.log('   - Some old features still visible');
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const report = {
      timestamp: new Date().toISOString(),
      url: 'https://ai-cofounder-platform-2411.vercel.app/',
      statusCode: result.statusCode,
      headers: result.headers,
      analysis: analysis,
      contentLength: result.body.length
    };
    
    fs.writeFileSync('autotest-report.json', JSON.stringify(report, null, 2));
    console.log('\nüìÑ Report saved to: autotest-report.json');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
runAutoTest();
